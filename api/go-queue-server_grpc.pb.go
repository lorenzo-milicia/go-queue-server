// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: api/go-queue-server.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataFetcherClient is the client API for DataFetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataFetcherClient interface {
	FetchQueueStream(ctx context.Context, in *StreamSize, opts ...grpc.CallOption) (DataFetcher_FetchQueueStreamClient, error)
}

type dataFetcherClient struct {
	cc grpc.ClientConnInterface
}

func NewDataFetcherClient(cc grpc.ClientConnInterface) DataFetcherClient {
	return &dataFetcherClient{cc}
}

func (c *dataFetcherClient) FetchQueueStream(ctx context.Context, in *StreamSize, opts ...grpc.CallOption) (DataFetcher_FetchQueueStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataFetcher_ServiceDesc.Streams[0], "/api.DataFetcher/FetchQueueStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataFetcherFetchQueueStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataFetcher_FetchQueueStreamClient interface {
	Recv() (*Records, error)
	grpc.ClientStream
}

type dataFetcherFetchQueueStreamClient struct {
	grpc.ClientStream
}

func (x *dataFetcherFetchQueueStreamClient) Recv() (*Records, error) {
	m := new(Records)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataFetcherServer is the server API for DataFetcher service.
// All implementations must embed UnimplementedDataFetcherServer
// for forward compatibility
type DataFetcherServer interface {
	FetchQueueStream(*StreamSize, DataFetcher_FetchQueueStreamServer) error
	mustEmbedUnimplementedDataFetcherServer()
}

// UnimplementedDataFetcherServer must be embedded to have forward compatible implementations.
type UnimplementedDataFetcherServer struct {
}

func (UnimplementedDataFetcherServer) FetchQueueStream(*StreamSize, DataFetcher_FetchQueueStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchQueueStream not implemented")
}
func (UnimplementedDataFetcherServer) mustEmbedUnimplementedDataFetcherServer() {}

// UnsafeDataFetcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataFetcherServer will
// result in compilation errors.
type UnsafeDataFetcherServer interface {
	mustEmbedUnimplementedDataFetcherServer()
}

func RegisterDataFetcherServer(s grpc.ServiceRegistrar, srv DataFetcherServer) {
	s.RegisterService(&DataFetcher_ServiceDesc, srv)
}

func _DataFetcher_FetchQueueStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSize)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataFetcherServer).FetchQueueStream(m, &dataFetcherFetchQueueStreamServer{stream})
}

type DataFetcher_FetchQueueStreamServer interface {
	Send(*Records) error
	grpc.ServerStream
}

type dataFetcherFetchQueueStreamServer struct {
	grpc.ServerStream
}

func (x *dataFetcherFetchQueueStreamServer) Send(m *Records) error {
	return x.ServerStream.SendMsg(m)
}

// DataFetcher_ServiceDesc is the grpc.ServiceDesc for DataFetcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataFetcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DataFetcher",
	HandlerType: (*DataFetcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchQueueStream",
			Handler:       _DataFetcher_FetchQueueStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/go-queue-server.proto",
}

// QueueConsumerClient is the client API for QueueConsumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueConsumerClient interface {
	ConsumeQueue(ctx context.Context, opts ...grpc.CallOption) (QueueConsumer_ConsumeQueueClient, error)
}

type queueConsumerClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueConsumerClient(cc grpc.ClientConnInterface) QueueConsumerClient {
	return &queueConsumerClient{cc}
}

func (c *queueConsumerClient) ConsumeQueue(ctx context.Context, opts ...grpc.CallOption) (QueueConsumer_ConsumeQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueueConsumer_ServiceDesc.Streams[0], "/api.QueueConsumer/ConsumeQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &queueConsumerConsumeQueueClient{stream}
	return x, nil
}

type QueueConsumer_ConsumeQueueClient interface {
	Send(*Records) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type queueConsumerConsumeQueueClient struct {
	grpc.ClientStream
}

func (x *queueConsumerConsumeQueueClient) Send(m *Records) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queueConsumerConsumeQueueClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueueConsumerServer is the server API for QueueConsumer service.
// All implementations must embed UnimplementedQueueConsumerServer
// for forward compatibility
type QueueConsumerServer interface {
	ConsumeQueue(QueueConsumer_ConsumeQueueServer) error
	mustEmbedUnimplementedQueueConsumerServer()
}

// UnimplementedQueueConsumerServer must be embedded to have forward compatible implementations.
type UnimplementedQueueConsumerServer struct {
}

func (UnimplementedQueueConsumerServer) ConsumeQueue(QueueConsumer_ConsumeQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeQueue not implemented")
}
func (UnimplementedQueueConsumerServer) mustEmbedUnimplementedQueueConsumerServer() {}

// UnsafeQueueConsumerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueConsumerServer will
// result in compilation errors.
type UnsafeQueueConsumerServer interface {
	mustEmbedUnimplementedQueueConsumerServer()
}

func RegisterQueueConsumerServer(s grpc.ServiceRegistrar, srv QueueConsumerServer) {
	s.RegisterService(&QueueConsumer_ServiceDesc, srv)
}

func _QueueConsumer_ConsumeQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueueConsumerServer).ConsumeQueue(&queueConsumerConsumeQueueServer{stream})
}

type QueueConsumer_ConsumeQueueServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Records, error)
	grpc.ServerStream
}

type queueConsumerConsumeQueueServer struct {
	grpc.ServerStream
}

func (x *queueConsumerConsumeQueueServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queueConsumerConsumeQueueServer) Recv() (*Records, error) {
	m := new(Records)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueueConsumer_ServiceDesc is the grpc.ServiceDesc for QueueConsumer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueConsumer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.QueueConsumer",
	HandlerType: (*QueueConsumerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumeQueue",
			Handler:       _QueueConsumer_ConsumeQueue_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/go-queue-server.proto",
}
